<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pattern | Ruby is Magic – Das Blog]]></title>
  <link href="http://rubyismagic.de/blog/categories/pattern/atom.xml" rel="self"/>
  <link href="http://rubyismagic.de/"/>
  <updated>2013-02-11T01:49:59+01:00</updated>
  <id>http://rubyismagic.de/</id>
  <author>
    <name><![CDATA[Dirk Breuer & Sebastian Cohnen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Behind the Scenes: Decorators]]></title>
    <link href="http://rubyismagic.de/blog/2012/02/09/behind-the-scenes-decorators/"/>
    <updated>2012-02-09T13:27:00+01:00</updated>
    <id>http://rubyismagic.de/blog/2012/02/09/behind-the-scenes-decorators</id>
    <content type="html"><![CDATA[<p>Willkommen bei "Ruby is Magic – Behind the Scenes". Wenn ihr euch noch
an die <a href="blog/2012/01/19/episode-7-closures/">letzte Episode</a> erinnert, dann haben wir gezeigt, wie sich in Ruby
Methoden als Closures verwenden lassen. Dazu haben wir das
<a href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator-Pattern</a> ähnlich <a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#101447">wie in Python</a> <a href="https://gist.github.com/294f56ed664efa99dcac">implementiert</a>.</p>

<p>Das Transkript der letzten Show war allerdings schon recht lang und
daher sind wir nicht näher auf die Implementierung eingegangen. Da sie
jedoch sehr interessant ist, wollen wir in diesem Artikel noch einmal
im Detail darauf eingehen. Als kleinen Bonus haben wir das ganze auch
einmal einem Benchmark unterzogen – natürlich völlig
nicht-repräsentativ ;-)</p>

<!-- more -->


<p>Zunächst aber noch einmal kurz zum Hintergrund: Es ging vor
allem darum einen halbwegs realen Anwendungsfall für die Verwendung von
<code>method()</code> zu finden. Das was am Ende dann hinten raus gefallen ist,
lässt sich unserer Meinung nach sogar tatsächlich in realen
Projekten einsetzen, denn das Decorator-Pattern ermöglicht durchaus elegante
Lösungen, wenn man eine Reihe unterschiedlicher Methoden mit
zusätzlichen Funktionalitäten anreichern möchte. In unserem Beispiel war
es dann eben das Hinzufügen einer Caching-Schicht.</p>

<p>Nehmen wir als Ausgangspunkt einmal ein stark vereinfachtes Objekt, um
auf eine relationale Datenbank zuzugreifen:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Datenbank Anbindung ohne Caching  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DatabaseConnector</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@connection.perform_sql(&quot;SELECT * FROM ? WHERE id = ?&quot;, self.table_name, id)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Wir haben hier, wie so oft, unterschiedliche Möglichkeiten Caching
hinzuzufügen. Eine Variante wäre die Verwendung von <code>alias_method</code> oder
eben <code>alias_method_chain</code>, wenn ActiveSupport mit von der Partie ist. Das Ergebnis
ist, dass man eine weitere Methode in seiner Klasse definiert, die
das Caching implementiert. Dann stellen wir uns vor, dass wir noch zwei
bis drei weitere Methoden cachen wollen. Die einzelnen Implementierungen
werden dabei recht ähnlich zueinander sein und zusätzlich ist die Klasse
überladen mit Methoden, die nicht wirklich in ihren Aufgabenbereich
fallen:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Datenbank Anbindung mit Caching  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DatabaseConnector</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@connection.perform_sql(&quot;SELECT * FROM ? WHERE id = ?&quot;, self.table_name, id)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">find_with_cache</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;MyCache.instance.fetch(&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">table_name</span><span class="si">}</span><span class="sr">-find-</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="sr">&quot;) { find_without_cache(id) }</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  alias_method_chain :find, :cache&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">count</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@connection.perform_sql(&quot;SELECT COUNT(*) FROM ?&quot;, self.table_name)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">count_with_cache</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;MyCache.instance.fetch(&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">table_name</span><span class="si">}</span><span class="sr">-count&quot;) { count_without_cache }</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  alias_method_chain :count, :cache</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Das erste Problem lässt sich lösen, indem die Cache-Funktionalität in
einer eigenen Klasse weiter gekapselt und diese in jeder Methode
aufgerufen wird. Realisiert man diese Klasse nun noch als Decorator,
haben wir auch das zweite Problem aus der Welt geschafft:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Datenbank Anbindung mit Decorator  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CacheDecorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="o">*</span><span class="n">params</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;MyCache.instance.fetch(cache_key(*params)) {</span>
</span><span class='line'><span class="sr">  @component.call(*params)</span>
</span><span class='line'><span class="sr">}</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">DatabaseConnector</span>
</span><span class='line'>  <span class="n">decorate</span> <span class="no">CacheDecorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@connection.perform_sql(&quot;SELECT * FROM ? WHERE id = ?&quot;, self.table_name, id)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Die Konstruktion des Cache-Keys ist natürlich jetzt etwas komplexer
geworden, aber irgendwas ist ja immer …</p>

<h2>Implementierung</h2>

<p>Kommen wir nun langsam zum interessanten Teil: Die Implementierung.
Vergleicht man die <code>alias_method_chain</code>-Methode mit der
Decorator-Variante, dann fallen zwei Unterschiede auf:</p>

<ol>
<li>Die Methode <code>decorate</code> wird <em>vor</em> der zu dekorierenden Methode
aufgerufen.</li>
<li>Der Name der zu dekorierenden Methode wird nicht angegeben –
lediglich die Decorator-Klasse.</li>
</ol>


<p>Überlegen wir uns zunächst einmal welche Schritte notwendig sein
werden, um unsere Decorator Funktionalität umzusetzen:</p>

<ol>
<li>Erkennen welche Methode zu dekorieren ist</li>
<li>Methode extrahieren – <code>method()</code></li>
<li>Decorator mit extrahierter Methode inititalisieren</li>
<li>Proxy Methode definieren</li>
<li>Binding vor Ausführung der “alten” Methode umsetzen</li>
</ol>


<p>Im Kontext von Closures sind nur die Punkte 2. und 5. von Relevanz. Der
Rest ist im Grunde nur Glue-Code – Was ihn jedoch nicht weniger
interessant macht.</p>

<p>Das ganze in Ruby-Code gegossen ergibt dann nicht einmal 40 Zeilen
– wieder einmal ein schönes Beispiel dafür, wie ausdrucksstark diese
Sprache ist:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Implementierung des Decorator-Pattern  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">FunctionDecorators</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">decorate</span><span class="p">(</span><span class="n">decorator</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@decorate_next_with = decorator</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">method_added</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;if decorator_class = @decorate_next_with</span>
</span><span class='line'><span class="sr">  @decorate_next_with = nil</span>
</span><span class='line'><span class="sr">  apply_decorator(decorator_class, name, self)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">__decorators</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@_decorators ||= {}</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">apply_decorator</span><span class="p">(</span><span class="n">decorator</span><span class="p">,</span> <span class="n">method_name</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;decorated_method = target.instance_method(method_name)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">target.send(:remove_method, method_name)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">target.__decorators[method_name] = { :decorator =&amp;gt; decorator.new, :method =&amp;gt; decorated_method }</span>
</span><span class='line'>
</span><span class='line'><span class="sr">new_method = &amp;lt;&amp;lt;-RUBY</span>
</span><span class='line'><span class="sr">  def </span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="sr">(*params, &amp;amp;block)</span>
</span><span class='line'><span class="sr">    unless @_</span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="sr">_decorator</span>
</span><span class='line'><span class="sr">      @_</span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="sr">_decorator, decorated_method = self.class.__decorators[:</span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="sr">].values</span>
</span><span class='line'><span class="sr">      @_</span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="sr">_decorator.bind(decorated_method, self)</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    @_</span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="sr">_decorator.call(*params, &amp;amp;block)</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">RUBY</span>
</span><span class='line'>
</span><span class='line'><span class="sr">target.class_eval new_method</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Die angesprochenen Unterschiede zu <code>alias_method</code> haben wir durch einen
der zahlreichen (und teilweise nicht dokumentierten) Callbacks in Ruby
realisiert: Der Methodenaufruf <code>decorate</code> merkt sich einfach die
Decorator-Klasse und sobald die nächste Methode definiert wird, wird
diese damit dekoriert. Auf das Hinzufügen einer Methode lässt sich dann mit
dem Callback <code>method_added</code> warten.</p>

<p>Im Callback wird dann die zu dekorierende Methode extrahiert und durch
eine neue ersetzt. Die neue Methode braucht dabei nicht die gleiche
Signatur zu besitzen (das hatten wir in der letzten Episode noch
anders) – alle Parameter einsammeln und einen optionalen Block-Parameter
definieren reicht schon aus. Auf Klassenebene legen wir unter dem
Methodennamen noch die ursprüngliche Methode und eine Instanz der
Decorator-Klasse ab. Das ist notwendig, weil wir eine <code>UnboundMethod</code>
extrahieren, d.h. sie ist keinem Objekt zugeordnet und lässt sich damit
auch nicht aufrufen. Das <code>bind</code> wird dann durchgeführt sobald die
neu-definierte Methode auf einer konkreten Instanz aufgerufen wird.
Damit erhalten wir eine Instanz von <code>Method</code>, die sich wie ein Closure
aufrufen lässt.</p>

<p>Das ganze ist als Modul realisert, welches per <code>extend</code> entweder direkt
in <code>Object</code> oder etwas selektiver nur in die zu dekorierenden Klassen
eingebunden werden kann.</p>

<p>Zur Vollständigkeit hier noch die komplette Implementierung des
<code>CacheDecorator</code>. Erwähnenswert ist noch, dass man über die <code>receiver</code>
auf der ursprünglichen Methode <code>@component</code> die die Instanz des
dekorierten Objekts erhält. Somit hat man schon hier Zugriff auf den
Kontext von <code>@component</code> und kann zum Beispiel den Cache-Key
konstruieren:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Implementierung des Decorators  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CacheDecorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="o">*</span><span class="n">params</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;MyCache.instance.fetch(cache_key(*params)) {</span>
</span><span class='line'><span class="sr">  @component.call(*params)</span>
</span><span class='line'><span class="sr">}</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">cache_key</span><span class="p">(</span><span class="o">*</span><span class="n">params</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&quot;</span><span class="si">#{</span><span class="vi">@component</span><span class="o">.</span><span class="n">receiver</span><span class="o">.</span><span class="n">table_name</span><span class="si">}</span><span class="sr">-</span><span class="si">#{</span><span class="vi">@component</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">bind</span><span class="p">(</span><span class="n">component</span><span class="p">,</span> <span class="n">receiver</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@component = component.bind(receiver)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Benchmark</h2>

<p>Wie versprochen gibt es am Ende noch einen nicht-repräsentativen
Benchmark für die Verwendung unserer Decorator-Implementierung. Wir
haben eine alternative Implementierung mit <code>alias_method_chain</code>, also
unter Verwendung von ActiveSupport mit dem Decorator-Ansatz verglichen.
Konkret sah die Teststellung wie folgt aus:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Benchmark  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">runs</span> <span class="o">=</span> <span class="mi">1_000_000</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Benchmark.bm(40) do |x|</span>
</span><span class='line'><span class="sr">  x.report(&quot;Cache with alias&quot;) do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">runs</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">connector</span> <span class="o">=</span> <span class="no">DatabaseConnectorWithAlias</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">connector</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span><span class='line'>  <span class="n">connector</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  x.report(&quot;Cache with alias (single instance)&quot;) do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">connector</span> <span class="o">=</span> <span class="no">DatabaseConnectorWithAlias</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">runs</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">connector</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span><span class='line'>  <span class="n">connector</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  x.report(&quot;Cache with Decorator&quot;) do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">runs</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">connector</span> <span class="o">=</span> <span class="no">DatabaseConnectorWithDecorator</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">connector</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span>
</span><span class='line'>  <span class="n">connector</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  x.report(&quot;Cache with Decorator (single instance)&quot;) do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">connector</span> <span class="o">=</span> <span class="no">DatabaseConnectorWithDecorator</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">runs</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">connector</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span>
</span><span class='line'>  <span class="n">connector</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Wie erwartet ist die Decorator-Implementierung signifikant langsamer
als <code>alias_method_chain</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>______                                         user     system      total        real
</span><span class='line'>Cache with alias                           2.650000   0.010000   2.660000 (  2.671713)
</span><span class='line'>Cache with alias (single instance)         2.370000   0.000000   2.370000 (  2.419900)
</span><span class='line'>Cache with Decorator                      13.620000   0.020000  13.640000 ( 13.794589)
</span><span class='line'>Cache with Decorator (single instance)     8.750000   0.020000   8.770000 (  8.809148)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Aber es war ja auch nicht das Ziel <code>alias_method_chain</code> zu ersetzen,
sondern einen Anwendungsfall für Methoden als Closures zu finden. Wir
denken, dass ist uns gut gelungen und wir werden diese Implementierung
definitiv irgendwo mal verwenden, denn es macht den Code durchaus
übersichtlicher und die Decorator besser testbar.</p>

<p>Das war es auch schon mit dem ersten "Behind the Scenes". Wir hoffen es
hat auch gefallen. Wir sehen uns bei der nächsten "Ruby is Magic"-Show
am 15.02.2012 auf der <a href="http://colognerb.de">cologne.rb</a>.</p>
]]></content>
  </entry>
  
</feed>
